<html>
<head>
<title>Linked List Tests</title>
<!-- Combo-handled YUI CSS files: -->
<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/combo?2.7.0/build/logger/assets/logger.css&2.7.0/build/yuitest/assets/testlogger.css">
<!-- Combo-handled YUI JS files: -->
<script type="text/javascript" src="http://yui.yahooapis.com/combo?2.7.0/build/yahoo-dom-event/yahoo-dom-event.js&2.7.0/build/logger/logger-min.js&2.7.0/build/yuitest/yuitest-min.js"></script>
<script type="text/javascript" src="linked-list.js"></script>


</head>
<body>
<h1>Linked List Tests</h1>
<script type="text/javascript">

YAHOO.namespace("test");

YAHOO.test.LinkedList = (function(){
    
    var assert = YAHOO.util.Assert;
    
    //-------------------------------------------------------------------------
    // Base Test Suite
    //-------------------------------------------------------------------------
    
    var suite = new YAHOO.tool.TestSuite("Linked List Tests");
    
    //-------------------------------------------------------------------------
    // Test Case for adding
    //-------------------------------------------------------------------------
    
    suite.add(new YAHOO.tool.TestCase({
    
        name : "insertNext() Tests",

        setUp: function(){
            this.list = new LinkedList();
        },
        
        tearDown: function(){
            delete this.list;
        },

        //---------------------------------------------------------------------
        // Tests
        //---------------------------------------------------------------------
    
        testAddSingle: function(){
            this.list.insertNext(null, "Hi");
            
            assert.areEqual(1, this.list.getSize(), "List should have one item.");
            assert.areEqual("Hi", this.list.getHead().data, "First item should have data of 'Hi'.");                    
            assert.isNull(this.list.getHead().next, "The next pointer of the first item should be null.");                    
        },
        
        testAddMultiple: function(){
            this.list.insertNext(this.list.getTail(), "Hi");
            this.list.insertNext(this.list.getTail(), "Yo");
            
            assert.areEqual(2, this.list.getSize(), "List should have one item.");
            assert.areEqual("Hi", this.list.getHead().data, "First item should have data of 'Hi'.");
            assert.areEqual("Yo", this.list.getHead().next.data, "Second item should have data of 'Yo'.");
            assert.isNull(this.list.getHead().next.next, "The next pointer of the second item should be null.");                    
        }
    }));

    //-------------------------------------------------------------------------
    // Test Case for removing values
    //-------------------------------------------------------------------------
    
    suite.add(new YAHOO.tool.TestCase({
    
        name : "removeNext() Tests",

        setUp: function(){
            this.list = new LinkedList();
            this.list.insertNext(this.list.getTail(), "Hi");
            this.list.insertNext(this.list.getTail(), "Yo");
            this.list.insertNext(this.list.getTail(), "Bye");
        },
        
        tearDown: function(){
            delete this.list;
        },

        //---------------------------------------------------------------------
        // Tests
        //---------------------------------------------------------------------
    
        testRemoveFirstItem: function(){
            var value = this.list.removeNext(null);
            assert.areEqual("Hi", value.data, "Removed item should be 'Hi'.");
            assert.areEqual(2, this.list.getSize(), "There should only be two items left.");
            assert.areEqual("Yo", this.list.getHead().data, "First item should now be 'Yo'.");
            assert.areEqual("Bye", this.list.getHead().next.data, "Last item should now be 'Bye'.");
            assert.isNull(this.list.getHead().next.next, "Item in position 2 should be null.");
        },
        
        testRemoveMiddleItem: function() {
            var value = this.list.removeNext(this.list.getHead());
            assert.areEqual("Yo", value.data, "Removed item should be 'Yo'.");
            assert.areEqual(2, this.list.getSize(), "There should only be two items left.");
            assert.areEqual("Hi", this.list.getHead().data, "First item should now be 'Yo'.");
            assert.areEqual("Bye", this.list.getHead().next.data, "Last item should now be 'Bye'.");
            assert.isNull(this.list.getHead().next.next, "Item in position 2 should be null.");
        }
    }));        

    //-------------------------------------------------------------------------
    // Test Case for converting to an array
    //-------------------------------------------------------------------------
    
    suite.add(new YAHOO.tool.TestCase({
    
        name : "toArray() Tests",

        setUp: function(){
            this.list = new LinkedList();
        },
        
        tearDown: function(){
            delete this.list;
        },

        //---------------------------------------------------------------------
        // Tests
        //---------------------------------------------------------------------
    
        testToArrayForEmptyList: function(){
            var value = this.list.toArray();
            assert.isInstanceOf(Array, value, "Value should be an array.");
            assert.areEqual(0, value.length, "Array should be empty.");
        },
        
        testToArrayForOneItemList: function(){
            this.list.insertNext(null, "Hi");
            var value = this.list.toArray();
            assert.isInstanceOf(Array, value, "Value should be an array.");
            assert.areEqual(1, value.length, "Array should have 1 item.");
            assert.areEqual("Hi", value[0], "The only item should be 'Hi'.");
        },
        
        testToArrayForTwoItemList: function(){
            this.list.insertNext(this.list.getTail(), "Hi");
            this.list.insertNext(this.list.getTail(), "Yo");
            var value = this.list.toArray();
            assert.isInstanceOf(Array, value, "Value should be an array.");
            assert.areEqual(2, value.length, "Array should have 2 items.");
            assert.areEqual("Hi", value[0], "The first item should be 'Hi'.");
            assert.areEqual("Yo", value[1], "The second item should be 'Yo'.");
        }

    }));    

    //return it
    return suite;

})();

(function (){
    //create the logger
    var logger = new YAHOO.tool.TestLogger();
    
    //add the tests
    YAHOO.tool.TestRunner.add(YAHOO.test.LinkedList);
    YAHOO.tool.TestRunner.run();

})();


</script>
</body>
</html>
